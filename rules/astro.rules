//==================================================================================================
// astro.rules - Astro related processing, including sun and moon data and day/night triggers.
//==================================================================================================
//  20200116 v15    removed rules migrated to Jython.
//  v14 21091229 Changed extra logging to debug level.
//  v13 20191226 Merged tomorrow sunset/rise rules; fixed Item name 'Astro_Sun_Elevation'.
//  v12 20191222 Renamed Items.
//  v11 20191025 Added next day sunrise/sunset handling.
//==================================================================================================

//==================================================================================================
// Global variables used throughout the rule.
//==================================================================================================

// Android Alarm clock timer.
var Timer timerAlarm = null

//==================================================================================================
// Update the next sunset/rise times and Day Mode when the Astro day phase changes or the Cloudiness
//  changes.
//==================================================================================================
// rule "Astro.DayPhase - Calculate current day Mode and next sunrise/sunset times"
// when
//     Item Astro_Day_Phase changed or
//     Item Weather_Cloudy changed or
//     System started
// then
//     val String TAG = "Astro.DayPhase.Change"
//     var Boolean cloudy = false

//     //--- Sanity checks
//     if (Astro_Day_Phase.state == NULL)
//         return;

//     var String phase = Astro_Day_Phase.state.toString()
//     val Number hour = now.getHourOfDay()

//     if (Weather_Cloudy.state != NULL && Weather_Cloudy.state == ON) {
//         logDebug(TAG, "Set Cloudy switch to TRUE")
//         cloudy = true
//     }

//     //-- Update Day Mode based on Astro Day Phase
//     //SUN_RISE, ASTRO_DAWN, NAUTIC_DAWN, CIVIL_DAWN, CIVIL_DUSK, NAUTIC_DUSK, ASTRO_DUSK, SUN_SET, DAYLIGHT, NIGHT
//     switch (phase) {
//         case "DAYLIGHT": {
//             logDebug(TAG, "Day Phase is DAYLIGHT, check time to set Day Mode to MORNING or DAY")
//             Day_Mode.sendCommand(if (hour>=7) "DAY" else "MORNING")
//         }
//         case "SUN_SET": {
//             logDebug(TAG, "Day Phase is sunset, check if cloudy")
//             Day_Mode.sendCommand(if (cloudy) "EVENING" else "DAY")
//         }
//         case "SUN_RISE": {
//             logDebug(TAG, "Day Phase is sunrise, check if cloudy")
//             Day_Mode.sendCommand(if (cloudy) "MORNING" else "DAY")
//         }
//         case "ASTRO_DAWN",
//         case "NAUTIC_DAWN",
//         case "CIVIL_DAWN": {
//             logDebug(TAG, "Day Phase is DAWN")
//             Day_Mode.sendCommand(if (hour >= 6) "MORNING" else "NIGHT")
//         }
//         case "ASTRO_DUSK",
//         case "NAUTIC_DUST",
//         case "CIVIL_DUSK": {
//             logDebug(TAG, "Day Phase is DUSK")
//             Day_Mode.sendCommand(if (hour<=23) "EVENING" else "NIGHT")
//         }
//         case "NIGHT": {
//             logDebug(TAG, "Day Phase is NIGHT")
//             Day_Mode.sendCommand(if (hour<=23) "EVENING" else "NIGHT")
//         }
//     }
// end


//==================================================================================================
// Take morning actions when the Android Alarm goes off
//==================================================================================================
rule "Alarm.Clock.Change - Android Alarm clock actions"
when
    Item AlarmClock changed
then
    val String TAG = "Alarm.Clock.Changed"
    logInfo(TAG, ">>>>>> Enter rule with '{}' from '{}' >>>>>>", AlarmClock.state, previousState.toString)
    if (previousState == NULL)
        return;

    if (AlarmClock.state as Number == 0)
    {
        logInfo(TAG, "AlarmClock state changed to 0, cancel all alarms")
        if (timerAlarm !== null)
        {
            //timerAlarm?.cancel
            logInfo(TAG, "AlarmClock timerAlarm is running, cancel it")
            timerAlarm.cancel
            timerAlarm = null
        }
    }
    else
    {
        var epoch = new DateTime((AlarmClock.state as Number).longValue)
        logInfo(TAG, "Schedule Android alarm for {}", epoch.toString)

        if (timerAlarm !== null)
        {
            logInfo(TAG, "Reschedule Android alarm to {}", epoch.toString)
            timerAlarm.reschedule(epoch)
        }
        else
        {
            logInfo(TAG, "New Android Alarm set to {}", epoch.toString)
            timerAlarm = createTimer(epoch,
                [|
                    // Turn off the House Alarm and turn on the hallway lighting
                    Light_Scene_Hall.sendCommand("EVENING")
                    Alarm_Status.sendCommand("DISARMED")
                    logInfo(TAG, "Android AlarmClock expired, turn on hall light and disarm the alarm")
                ]
            )
        }
    }
end
