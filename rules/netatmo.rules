//==================================================================================================
// netatmo.rules - v07 20190628 Updated CO2 reporting.
//--------------------------------------------------------------------------------------------------
// These rules handle Netatmo Healthy Home Coach Item updates.
// The CO2 reporting rules make sure we report high CO2 only once a day or after it has dropped
//  significant. The current interval as used by the binding is 5 minutes.
//..................................................................................................
// Rules in this file:
//  NetatmoInit - Initialize rules and arm watchdog timer.
//  NetatmoTimeout - Watchdog timeout triggered.
//  NetatmoMidnight - Reset CO2 Reported flags at midnight.
//  NetatmoCO2 - Check CO2 level.
//..................................................................................................
// Items changed by these rules:
//  NHC_Watchdog
//==================================================================================================


val Number CO2ThresholdHi = 1700                //Threshold for reporting high CO2 level (ppm)
val Number CO2ThresholdLo = 950                 //Threshold for reset high CO2 level (ppm)
var Number CO2HiReportedToday = 0               //CO2 Hi already reported today flag


//--------------------------------------------------------------------------------------------------
// Initialize settings for the Netatmo items and rules at system start.
//  1. Set default Grafana display switches;
//  2. Set initial watchdog timer.
// Note: It will also be triggered on any configuration file update.
//--------------------------------------------------------------------------------------------------
rule "NetatmoInit - Initialize the watchdog timer"
    when
    	Item NHC_Temp_Livingroom changed or
        Item NHC_CO2_Livingroom changed or
        Item NHC_Humidity_Livingroom changed or
    	System started
    then
        NHC_Watchdog.sendCommand(ON)
    end


//--------------------------------------------------------------------------------------------------
// Triggered when watchdog timer expires indicating we didn't receive data for 30 minutes.
// Send a push notification to the user.
//--------------------------------------------------------------------------------------------------
rule "NetatmoTimeout - Watchdog timeout triggered"
    when
    	Item NHC_Watchdog changed to OFF
    then
        val String TAG = "NHC."+triggeringItem.name+".Changed"
        val String MSG = "Netatmo Healthy Home Coach is not responding, please check the status of the device and online API."

        logError(TAG, MSG)
        sendBroadcastNotification(MSG)
        Echo_TTS_Livingroom.sendCommand("The " + MSG)

        NHC_Watchdog.sendCommand(ON)        //Re-arm the watchdog timer
    end


//----------------------------------------------------------------------------------------
// Set CO2Reported switch if CO2 level above high treshold; reset if below low threshold
//----------------------------------------------------------------------------------------
rule "NetatmoCO2 - Check CO2 level"
    when
        Item NHC_CO2_Livingroom changed
    then
        val String TAG = "NHC."+triggeringItem.name+".Changed"
        logDebug(TAG, ">>>>>> Enter rule >>>>>>")

        var String msg = ""

        if (triggeringItem.state == NULL)
        {
            logWarn(TAG, "Item "+triggeringItem.name+" state is NULL, exit rule")
            return;
        }

        //--- Get the current CO2 level in the livingroom, rounded to the lower 100's
        val CurrentCO2level = (Math::round((triggeringItem.state as Number).floatValue)/100)*100

        //--- Check if CO2 level is above high threshold
        if (CurrentCO2level > CO2ThresholdHi)
        {
            logDebug(TAG, "CO2 level is above threshold {}", CO2ThresholdHi)

            // Check if not yet reported in the last hour
            if (CO2HighReported_Livingroom.state == NULL || CO2HighReported_Livingroom.state == OFF)
            {
                if (CO2HiReportedToday == NULL || CO2HiReportedToday == 0)
                    msg = "Current CO2 level in the livingroom is more than " + CurrentCO2level + ". I suggest to open some ventilation."
                else
                    msg = "CO2 level in the livingroom is still too high at more than " + CurrentCO2level

                sendBroadcastNotification(msg)
                Echo_TTS_Livingroom.sendCommand("Hi, the " + msg)
                LGTV_Toast_Livingroom.sendCommand(msg)

                CO2HighReported_Livingroom.postUpdate(ON)
                CO2LowReported_Livingroom.postUpdate(OFF)
                CO2HiReportedToday = 1
            }
        }
        //--- Check if CO2 level below low threshold
        else if (CurrentCO2level < CO2ThresholdLo)
        {
            logDebug(TAG, "CO2 level is below threshold {}", CO2ThresholdLo)

            // Check if high CO2 level has been reported today, and low level not yet reported
            if (CO2HiReportedToday == 1 && (CO2LowReported_Livingroom.state == NULL || CO2LowReported_Livingroom.state == OFF))
            {
                msg = "Current CO2 level in the livingroom has returned to a healthy level of about " + CurrentCO2level + "."

                Echo_TTS_Livingroom.sendCommand("Hi, the "+ msg)
                sendBroadcastNotification(msg)
                LGTV_Toast_Livingroom.sendCommand(msg)

                CO2LowReported_Livingroom.postUpdate(ON)
            }

            CO2HighReported_Livingroom.postUpdate(OFF)
            CO2HiReportedToday = 0
        }
        else
            logDebug(TAG, "CO2 level {} is above low threshold {} and below high threshold {}", CurrentCO2level, CO2ThresholdHi, CO2ThresholdLo)
 
        logDebug(TAG, "<<<<<< Exit rule >>>>>>")
    end
