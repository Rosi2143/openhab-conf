//==================================================================================================
// astro.rules - handle AC related processing, including turning on/off based on door sensors.
//==================================================================================================
//  v12 20191227    Changed VeriSure Item names.
//  v11 20191025    Added next day sunrise/sunset handling.
//--------------------------------------------------------------------------------------------------
// Rules in this file:
//  Airco.Bedroom.Check - Turn the AC on/off in Bedroom based on time, temperature and door status.
//
// Items changes in these rules:
//  AC_Power_Bedromm - Master Bedroom airco power switch
//==================================================================================================


//==================================================================================================
// Rule global variables.
//==================================================================================================

var DateTime lastTime = new DateTime(now())


//==================================================================================================
// Check temperature inside+outside, time of day and door open/close state to switch the airco
//  on or off (with some hysteris).
//==================================================================================================
rule "Airco.Bedroom.Check - Turn on or off AC in Bedroom based on time and temperature"
when
    Item AC_Temp_Bedroom changed or
    Item Alarm_Door_Bedroom changed or
    Time cron "0 */10 * * * ?"
then
    val String tag = "Airco.Bedroom.Check"

    //--- Define threshold values
    var Number tempNightThreshold = 17
    var Number tempMorningThreshold = 18
    var Number tempDayThreshold = 21
    var Number tempThreshold = tempDayThreshold
    var Number outsideTempHiThreshold = 25
    var Number outsideTempLoThreshold = 17
    var DateTime currentTime = new DateTime(now())

    //--- Get current temperature readings
    var Number tempBedroom = AC_Temp_Bedroom.state as Number
    var Number tempOutside = AC_Temp_Outdoor.state as Number

    //--- Set status variables to default state
    var Number doorIsOpen = 0
    var Number acIsOn = 0

    //--- Set default state of the action variables
    var Number turnOn = 0
    var Number turnOff = 0
    var Number warn = 0
    var String msg = ""

	logDebug(tag, ">>> Enter rule with inside temp {} and outside temp {}", tempBedroom, tempOutside)

    // Check the current airco on/off status
    if (AC_Power_Bedroom.state != NULL && AC_Power_Bedroom.state == ON)
    {
        acIsOn = 1
        logDebug(tag, "01. Airco currently ON")
    }

    // Check if the door is open
    if (Alarm_Door_Bedroom.state != NULL && Alarm_Door_Bedroom.state == OPEN)
    {
        doorIsOpen = 1
        logDebug(tag, "02. Door currently OPEN")
        turnOff = 1
    }

    // Check if day or day/night/morning
    if (now.getHourOfDay() >=19 || now.getHourOfDay() <= 6)
        tempThreshold = tempNightThreshold
    else if (now.getHourOfDay() <= 7)
        tempThreshold = tempMorningThreshold
    else
        tempThreshold = tempDayThreshold
    logDebug(tag, "03. Inside temp threshold of {} used", tempThreshold)

    // Turn on the airco if it is very hot outside, regardless of time of day or bedroom temperature 
    if (tempOutside > outsideTempHiThreshold)
    {
        if (acIsOn == 0)
        {
            msg = "It is hot outside, so I turned on the airco in the bedroom for you to keep it cool"
            turnOn = 1
        }
        logDebug(tag, "04. Outside temp above {}, set turn-AC-on flag '{}'", tempOutside, turnOn)
    }
    else
    {
        if (AC_Vacation_Bedroom.state == ON)
        {
            logDebug(tag, "Vacation mode is on, turn off AC and exit Daikin rule")
            AC_Power_Bedroom.sendCommand(OFF)
            return;
        }

        // Check if bedroom temperature is above threshold to turn AC on
        if (tempBedroom > tempThreshold)
        {
            msg = "The bedroom temperature is rising, so I turned on the airco to keep it cool"
            turnOn = 1
            logDebug(tag, "05. Bedroom temp {} > {}, turn-AC-on flag is set to '{}'", tempBedroom, tempThreshold, turnOn)
        }
        else
        {
            // If bedroom is cooled off, check if outside is cool as well
            if (tempOutside < outsideTempLoThreshold)
            {
                msg = "The bedroom is cool now, so I turned off the airco for you"
                turnOn = 0
                turnOff = 1
                logDebug(tag, "06. Bedroom temp is {}, turn-AC-on flag set to '{}'", tempBedroom, turnOn)
            }
            else
                logDebug(tag, "07.Bedroom temp {} below threshold, but outside temp ({}), not turning off the AC if still on, AC-on is {}", tempBedroom, tempOutside, acIsOn)
        }
    }

    //--- Turn off the Airco if the door is open
    if (doorIsOpen != 0)
    {
        if (turnOn != 0)
        {
            msg = "The bedroom temperature is rising, but I cannot turn on the airco because the door is open. Please close the door first."
            warn = 1
            turnOn = 0
            turnOff = 1
            logDebug(tag, "08. The door is open and Turn-AC-On flag is set; set warn flag to '{}'", warn)
        }
        if (acIsOn != 0)
        {
            AC_Power_Bedroom.sendCommand(OFF)
            lastTime = new DateTime(now())
            acIsOn = 0
            turnOn = 0
            msg = "The bedroom airco is on but the door is open. I turned off the airco for you. Please, close the door."
            warn = 1
            logInfo(tag,"09. AC is on and door is open, turn off the AC")
        }
    }

    val Duration duration = new Duration(lastTime, currentTime);
    logDebug(tag,"Compare times, last time {}, now {}, diff {}", lastTime, currentTime, duration.getStandardMinutes())

    if (duration.getStandardMinutes() >= 9)
    {
        logDebug(tag, "10. Check turn on/off change because more than 9 min have passed since last check")
        if (turnOn != 0)
        {
            if (acIsOn == 0)
            {
                logInfo(tag, "Turn on the AC")
                AC_Power_Bedroom.sendCommand(ON)
                lastTime = new DateTime(now())
                // acIsOn = 1
            }
            else
            {
                msg = ""
                logDebug(tag, "11. AC already on, ignoring turn on action")
            }
        }
        else
        {
            if (acIsOn == 1 && turnOff == 1)
            {
                logInfo(tag, "Turn off the AC")
                AC_Power_Bedroom.sendCommand(OFF)
                lastTime = new DateTime(now())
                acIsOn = 0
            }
            else
            {
                msg = ""
                logDebug(tag, "12. AC already off, ignoring turn off action")
            }
        }
    }
    else
    {
        msg = ""
        logDebug(tag, "13. Last update no more than {} mins ago, ignoring change", duration.getStandardMinutes())
    }

    if (msg != "" && acIsOn != turnOn)
    {
        sendBroadcastNotification(msg)
        logInfo(tag, msg)
        if (AC_MessageRepeat.state != ON)
        {
            logDebug(tag, "Sending message '{}' to Alexa", msg)
            if (warn != 0)
                msg = "WARNING! " + msg
            else
                msg = "Hi, " + msg
            Echo_TTS_Livingroom.sendCommand(msg)
            AC_MessageRepeat.sendCommand(ON)
            lastTime = new DateTime(now())
            acIsOn = 0
        }
        else
            logDebug(tag, "14. Skipping message '{}' to Alexa", msg)
    }
    else
        logDebug(tag, "15. Airco on state is {}, desired turn on state {}", acIsOn, turnOn)
end
